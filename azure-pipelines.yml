trigger:
  branches:
    include: ["master", "azure-pipelines"]
  tags:
    include: ["*"]

jobs:
  - job: "Clippy"
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    strategy:
      matrix:
        windows-stable:
          imageName: "windows-latest"
          rustup_toolchain: stable
        linux-stable:
          imageName: "ubuntu-latest"
          rustup_toolchain: stable
        macos-stable:
          imageName: "macOS-latest"
          rustup_toolchain: stable

    pool:
      vmImage: $(imageName)

    steps:
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: Linux Darwin Install Rust
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN% --default-host x86_64-pc-windows-msvc
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: Windows Install Rust
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - script: rustup component add clippy
        displayName: Install Clippy
      - script: cargo clippy --all
        displayName: Run Clippy

  - job: "Test"
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    strategy:
      matrix:
        windows-stable:
          imageName: "windows-latest"
          rustup_toolchain: stable
          target: "x86_64-pc-windows-msvc"
        linux-stable:
          imageName: "ubuntu-latest"
          rustup_toolchain: stable
          target: "x86_64-unknown-linux-gnu"
        macos-stable:
          imageName: "macOS-latest"
          rustup_toolchain: stable
          target: "x86_64-apple-darwin"

    pool:
      vmImage: $(imageName)

    steps:
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: Linux Darwin Install Rust
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN% --default-host x86_64-pc-windows-msvc
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: Windows Install Rust
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - script: cargo build --all
        displayName: Cargo Build
      - script: cargo test --all
        displayName: Cargo Test

  - job: "Release"
    timeoutInMinutes: 0
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    strategy:
      matrix:
        windows-stable:
          imageName: "windows-latest"
          rustup_toolchain: stable
          target: "x86_64-pc-windows-msvc"
          docker: false
        linux-stable:
          imageName: "ubuntu-latest"
          rustup_toolchain: stable
          target: "x86_64-unknown-linux-gnu"
          docker: false
        macos-stable:
          imageName: "macOS-latest"
          rustup_toolchain: stable
          target: "x86_64-apple-darwin"
          docker: false
        armv7-stable:
          imageName: "ubuntu-latest"
          rustup_toolchain: stable
          target: "armv7-unknown-linux-gnueabihf"
          docker: true
        aarch64-stable:
          imageName: "ubuntu-latest"
          rustup_toolchain: stable
          target: "aarch64-unknown-linux-gnu"
          docker: true
        musl-stable:
          imageName: "ubuntu-latest"
          rustup_toolchain: stable
          target: "x86_64-unknown-linux-musl"
          docker: false

    pool:
      vmImage: $(imageName)

    steps:
      - bash: |
          DATE="$(date +%Y-%m-%d)"
          echo "##vso[task.setvariable variable=build.date]$DATE"
        displayName: Create Date Variable
      - bash: |
          MY_TAG="$(Build.SourceBranch)"
          MY_TAG=${MY_TAG#refs/tags/}
          echo $MY_TAG
          echo "##vso[task.setvariable variable=build.my_tag]$MY_TAG"
        displayName: Create Tag Variable

      - script: |
          sudo apt update
          sudo apt install -y musl-tools
        displayName: Linux Musl Dependencies
        condition: eq( variables['target'], 'x86_64-unknown-linux-musl' )
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: Linux Darwin Install Rust
        condition: and( ne( variables['Agent.OS'], 'Windows_NT' ), eq( variables['docker'], 'false' ))
      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN% --default-host x86_64-pc-windows-msvc
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: Windows Install Rust
        condition: and( eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['docker'], 'false' ))
      - script: |
          rustup target add $TARGET
        displayName: Add Musl Target
        condition: eq( variables['target'], 'x86_64-unknown-linux-musl' )
      - bash: cargo build --release --all --target $TARGET
        displayName: Cargo Build
        condition: eq( variables['docker'], 'false' )
      - bash: cargo test --release --all --target $TARGET
        displayName: Cargo Test
        condition: eq( variables['docker'], 'false' )

      - script: |
          docker build -t lazystream:$TARGET ./ci/$TARGET/
        displayName: Cross Setup Docker
        condition: eq( variables['docker'], 'true' )
      - script: |
          docker run -v "$(pwd):/source" lazystream:$TARGET cargo build --release --manifest-path /source/Cargo.toml --target $TARGET
        displayName: Cross Build
        condition: eq( variables['docker'], 'true' )

      - task: CopyFiles@2
        displayName: Copy Binary
        inputs:
          sourceFolder: "$(Build.SourcesDirectory)"
          contents: |
            target/**/release/?(lazystream|lazystream.exe)
          targetFolder: "$(Build.BinariesDirectory)/lazystream"
          flattenFolders: true
      - task: CopyFiles@2
        displayName: Copy Assets
        inputs:
          sourceFolder: "$(Build.SourcesDirectory)"
          contents: |
            README.md
          targetFolder: "$(Build.BinariesDirectory)/lazystream"

      - task: ArchiveFiles@2
        displayName: Linux Darwin Archive
        inputs:
          rootFolderOrFile: "$(Build.BinariesDirectory)/lazystream"
          archiveType: "tar"
          tarCompression: "gz"
          archiveFile: "$(Build.ArtifactStagingDirectory)/lazystream-$(build.my_tag)-$(TARGET).tar.gz"
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - task: ArchiveFiles@2
        displayName: Windows Archive
        inputs:
          rootFolderOrFile: "$(Build.BinariesDirectory)/lazystream"
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/lazystream-$(build.my_tag)-$(TARGET).zip"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - task: GithubRelease@0
        displayName: Publish Assets to Github Release
        condition: succeeded()
        inputs:
          gitHubConnection: "tarkah"
          repositoryName: "tarkah/lazystream"
          action: "edit"
          target: "$(build.sourceVersion)"
          tagSource: "manual"
          tag: "$(build.my_tag)"
          assets: "$(Build.ArtifactStagingDirectory)/*"
          title: "$(build.my_tag) - $(build.date)"
          assetUploadMode: "replace"
          addChangeLog: false
